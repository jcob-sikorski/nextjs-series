import { Metadata } from "next";

// Note: ensuring proper SEO is crucial for increasing visibility and attracting users
// Note: NextJS metadata API allows to define metadata for each page
// Note: metadata ensures accurate and relevant information 
//       is displayed when your pages are shared or indexed

// Note: we can configure metadata either in layout.tsx or page.tsx
// Note: there are two methods two configure metadata: 
//       exporting static metadata object or a dynamic generateMetadata function

// Note: Metadata rules:
//       1. Both layout.tsx and page.tsx can export metadata. 
//       If defined in layout, it applies to all the pages in that layout,
//       but if defined in a page, it applies only to that page
//
//       2. Metadata is read in order, from the root level down to the final page level
//
//       3. When there's metadata in multiple places for the same route, 
//          they get combined, but page metadata will replace
//          layout metadata if they have the same properites.

// Note: the title field's primary purpose is to define the document title
//       it can be either a string or an object

export const metadata: Metadata = {
  // title: 'Next.js',
  title: {
    // absolute: "", // Note: if we want to ignore the title.template 
    //               //       in the parent segments we can use the absolute field
    default: "Next.js Tutorial - Codevolution", // Note: this field is useful when you want to 
                                                //       provide a fallback for child route segments
                                                //       that don't explicitly specify the title
    template: "%s | Codevolution", // Note: to create the dynamic titles by adding a prefix or a suffix
                                   //       we can use this field. It applies to child 
                                   //       route segments and not the segment in which it's defined
  },
  description: 'Generated by Next.js',
}

// Note: nextJS automatically creates that folder when we create the root route

// Note: layout is the UI that is shared between multiple pages 
// in the app - it typically consists of header, content and footer

// Note: you can define a layout by default exporting React 
//       component from layout.tsx
//       That component should accept a children prop that will be 
//       populated with a child page during rendering.

// Note: this particular layout file in the root folder serves as the top-most layout.
//       It is mandatory for all NextJS applications. It's regenerated if deleted.

// Note: when it comes to nested layouts the root layout is rendered first for each page
export default function RootLayout({
  children, // Note: this will be replaced by a child component during rendering.
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <header
          style={{
            backgroundColor: "lightblue",
            padding: "1rem",
          }}
        >
          <p>Header</p>
        </header>
        {children}
        <footer
          style={{
            backgroundColor: "ghostwhite",
            padding: "1rem",
          }}
        >
          <p>Footer</p>
        </footer>
      </body>
    </html>
  )
}
